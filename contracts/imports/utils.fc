cell calculate_nft_item_state_init(int item_index, cell nft_item_code) inline {
  cell data = begin_cell().store_uint(item_index, 64).store_slice(my_address()).end_cell();
  return begin_cell().store_uint(0, 2).store_dict(nft_item_code).store_dict(data).store_uint(0, 1).end_cell();
}

slice calculate_nft_item_address(int wc, cell state_init) inline {
  return begin_cell().store_uint(4, 3)
                     .store_int(wc, 8)
                     .store_uint(cell_hash(state_init), 256)
                     .end_cell()
                     .begin_parse();
}

() send_message(int flags, int amount, slice to, cell body, int mode) impure inline_ref {
  cell msg = begin_cell()
    .store_uint(flags, 6)
    .store_slice(to)
    .store_coins(amount)
    .store_uint(1, 107)
    .store_ref(body)
  .end_cell();
  send_raw_message(msg, mode);
}

builder create_simple_transfer_body(int query_id, int jetton_amount, slice to) inline {
  return begin_cell()
    .store_uint(0xf8a7ea5, 32)
    .store_uint(query_id, 64)
    .store_coins(jetton_amount)
    .store_slice(to) ;; to_owner_address
    .store_slice(to)
    .store_uint(0, 1)
    .store_coins(1) ;; forward_ton_amount
    .store_uint(0, 1);
}

builder create_simple_transfer_body_with_payload(int query_id, int jetton_amount, slice to, builder payload) inline {
  return begin_cell()
    .store_uint(0xf8a7ea5, 32)
    .store_uint(query_id, 64)
    .store_coins(jetton_amount)
    .store_slice(to) ;; to_owner_address
    .store_slice(to)
    .store_uint(0, 1)
    .store_coins(1) ;; forward_ton_amount
    .store_uint(1, 1)
    .store_ref(payload.end_cell());
}