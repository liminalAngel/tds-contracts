#include "imports/stdlib.fc";
#include "imports/storage.fc";
#include "imports/utils.fc";
#include "imports/op.fc";
#include "imports/errors.fc";
#include "imports/params.fc";
#include "imports/admin-calls.fc";

() deploy_nft_item(int item_index, cell nft_item_code, int amount, cell nft_content) impure inline {
  cell state_init = calculate_nft_item_state_init(item_index, nft_item_code);
  slice nft_address = calculate_nft_item_address(workchain, state_init);
  var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(nft_address)
            .store_coins(amount)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init)
            .store_ref(nft_content);
  send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
}

() send_royalty_params(slice to_address, int query_id, slice data) impure inline {
  var msg = begin_cell()
    .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool packages:MsgAddress -> 011000
    .store_slice(to_address)
    .store_coins(0)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(op::report_royalty_params, 32)
    .store_uint(query_id, 64)
    .store_slice(data);
  send_raw_message(msg.end_cell(), 64); ;; carry all the remaining value of the inbound message
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    load_data();

    if (op == op::get_royalty_params) {
        send_royalty_params(sender_address, query_id, storage::royalty_params.begin_parse());
        return ();
    }

    if (equal_slices(sender_address, storage::owner_address)) {
        handle_admin_messages(op, query_id, in_msg_body);
        return ();
    }

    if (op == op::transfer_notification) {
        (int jetton_amount, slice from_user) = (in_msg_body~load_coins(), in_msg_body~load_msg_addr());
        ifnot ((equal_slices(sender_address, storage::jetton_wallet_address)) & (msg_value >= min_tons_for_nft_deploy)) {
            builder msg_body = create_simple_transfer_body(query_id, jetton_amount, from_user);
            send_message(0x10, 0, sender_address, msg_body.end_cell(), 64);
            return ();
        }

        if ((in_msg_body.slice_refs() > 0) & equal_slices(from_user, storage::owner_address)) {
            slice ref_cs = in_msg_body~load_ref().begin_parse();
            int transferred_op = ref_cs~load_uint(32);
            if (transferred_op == op::top_up_jtn_balance) {
                storage::total_reward += jetton_amount;
                save_data();
                return ();
            }
            throw(error::unknown_op);
        }

        int percent_one_day = storage::percent_year / 365; ;; 10^7 (0.01)
        int interest_one_day = muldiv(jetton_amount, percent_one_day, hundred_percent); ;; (10^12 * 10^7) / 10^9 = 10^10 (10)
        int interest = interest_one_day * storage::lockup_period; ;; 10^10 * 10 = 10^11 (100)
        storage::current_reward += interest;
        if (storage::total_reward < storage::current_reward) {
            builder msg_body = create_simple_transfer_body_with_payload(query_id, jetton_amount, from_user, begin_cell().store_uint(0, 32).store_slice("No reward!"));
            send_message(0x10, 0, sender_address, msg_body.end_cell(), 64);
            return ();
        }

        int now = now();
        cell nft_content = begin_cell()
            .store_slice(from_user)
            .store_ref(
                begin_cell()
                    .store_uint(now + (storage::lockup_period * seconds_per_day), 64)
                    .store_coins(interest)
                    .store_coins(jetton_amount)
                .end_cell()
            )
        .end_cell();
        
        deploy_nft_item(storage::next_item_index, storage::nft_item_code, min_tons_for_nft_deploy, nft_content);
        storage::next_item_index += 1;
        storage::total_reward += jetton_amount;
        save_data();
        return ();
    }

    if (op == op::process_unstake) {
        int idx = in_msg_body~load_uint(256);
        throw_unless(error::wrong_sender, equal_slices(sender_address, calculate_nft_item_address(0, calculate_nft_item_state_init(idx, storage::nft_item_code))));
        slice from_user = in_msg_body~load_msg_addr();
        slice staking_params = in_msg_body~load_ref().begin_parse();
        staking_params~skip_bits(64);
        int interest = staking_params~load_coins();
        int stake_size = staking_params~load_coins();

        send_message(0x10, min_tons_for_destroy, sender_address, begin_cell().store_uint(op::destroy, 32).store_uint(query_id, 64).store_slice(from_user).end_cell(), 0);

        builder msg_body = create_simple_transfer_body(query_id, stake_size + interest, from_user);
        send_message(0x10, msg_value - min_tons_for_unstake - min_tons_for_destroy, storage::jetton_wallet_address, msg_body.end_cell(), 0);
        return ();
    }
   
    throw(error::unknown_op);
}

;; Get methods

(int, cell, slice) get_collection_data() method_id {
    load_data();
    slice cs = storage::content.begin_parse();
    return (storage::next_item_index, cs~load_ref(), storage::owner_address);
}

slice get_nft_address_by_index(int index) method_id {
    load_data();
    cell state_init = calculate_nft_item_state_init(index, storage::nft_item_code);
    return calculate_nft_item_address(0, state_init);
}

(int, int, slice) royalty_params() method_id {
    load_data();
    slice rs = storage::royalty_params.begin_parse();
    return (rs~load_uint(16), rs~load_uint(16), rs~load_msg_addr());
}

cell get_nft_content(int index, cell individual_nft_content) method_id {
    load_data();
    slice cs = storage::content.begin_parse();
    cs~load_ref();
    slice common_content = cs~load_ref().begin_parse();
    return (begin_cell()
                        .store_uint(1, 8) ;; offchain tag
                        .store_slice(common_content)
                        .store_ref(individual_nft_content)
            .end_cell()); 
}

slice get_jetton_wallet_address() method_id {
    load_data();
    return storage::jetton_wallet_address;
}

(int, int, int, int) get_staking_data() method_id {
    load_data();
    return (
        storage::percent_year,
        storage::lockup_period,
        storage::total_reward,
        storage::current_reward
    );
}